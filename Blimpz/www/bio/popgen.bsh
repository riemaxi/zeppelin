/*style_main
#frame{
    -fx-font-size: 11pt;
    -fx-font-family: "Verdana";
    -fx-background: blue;
    -fx-text-fill: white;
}
style_main*/

/*uix_main
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane  fx:id="frame" prefHeight="426.0" prefWidth="657.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" >
   <children>
      <SplitPane fx:id="splitter" dividerPositions="0.7525252525252525" focusTraversable="true" orientation="VERTICAL" prefHeight="200.0" prefWidth="320.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <items>
          <AnchorPane fx:id="viewHost" minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
               <children>
                  <TextArea fx:id="view" editable="false" prefHeight="111.0" prefWidth="318.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
               </children>
            </AnchorPane>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
               <children>
                  <TextArea id="command" prefHeight="81.0" prefWidth="318.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
               </children>
            </AnchorPane>
        </items>
      </SplitPane>
   </children>
</AnchorPane>
uix_main*/

//Begin controller
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.event.EventHandler;
import java.lang.String;
import java.util.function.Consumer;

generation(n, freq){
    int nr = n;
    double[] frequency = new double[freq.length];
    for(i=0; i<freq.length; i++)
        frequency[i] = freq[i];

    return this;
};

generations = 6000;

genlist = new ArrayList();

command = null;
view = null;

execute(c){
    this.args = c.split(" ");
    switch(args[0].trim()){
        case "stream" : stream(this.args[1].trim()); break;
        default: view.setText("no command\n" + view.getText());
    }
}

//Handlers
streamHandler(){
    return new Consumer(){
        accept(gen){
            genlist.add( generation(gen.genr, gen.frequency) );
        }
    };
}

commandHandler(){
    return new EventHandler(){
        handle(ev){
            if (ev.getCode() == KeyCode.ENTER){
                String[] params = command.getText().split("\n");
                execute(params[params.length-1].trim());
            }
        }
    };
}

playerHandler(){
    return new Consumer(){
        accept(data){
            plot();
            if (genlist.size()>=generations)
                context.player.stop();
        }
    };
}

//Utils
plot(){
    str = new StringBuffer();
    
    for(g : genlist){
        gstr = new StringBuffer();
        for(f : g.frequency)
            gstr.append(gstr.length()==0?"":" ").append(f);

        str.append(str.length()==0?"":"\n").append(gstr.toString());
    }

    view.setText(str.toString());
}

stream(source){
    genlist.clear();
    context.player.play(500, playerHandler());
    context.stream(source, streamHandler() );
}

//End controller


//Begin interface
context = null;

init(){
    view = context.get("view");

    command = context.get("command");
    command.addEventHandler(KeyEvent.KEY_RELEASED, commandHandler());
}

uiaddress(){
    return null;
}

ui(id){
 return "uix_" + id;
}

ui(){
 return ui("main");
}

style(){
    return style("main");
}

style(id){
    return "style_" + id;
}

stylePath(){
    return "style.css";
}

loaded(){
};
//End interface