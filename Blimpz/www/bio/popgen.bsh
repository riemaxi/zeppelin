/*style_main
#frame{
    -fx-font-size: 11pt;
    -fx-font-family: "Verdana";
    -fx-background: white;
    -fx-text-fill: white;
}
style_main*/

/*uix_main
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.canvas.*?>

<AnchorPane  fx:id="frame" prefHeight="426.0" prefWidth="657.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" >
   <children>
      <SplitPane fx:id="splitter" dividerPositions="0.7525252525252525" focusTraversable="true" orientation="VERTICAL" prefHeight="200.0" prefWidth="320.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <items>
          <AnchorPane fx:id="viewHost" minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
               <children>
                  <Canvas fx:id="view" height="200.0" width="200.0" AnchorPane.bottomAnchor="14.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="14.0" AnchorPane.topAnchor="14.0" />
               </children>
            </AnchorPane>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
               <children>
                  <TextArea id="command" prefHeight="81.0" prefWidth="318.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
               </children>
            </AnchorPane>
        </items>
      </SplitPane>
   </children>
</AnchorPane>
uix_main*/

//Begin controller
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.event.EventHandler;
import javafx.scene.paint.Color;
import java.lang.String;
import java.util.function.Consumer;
import javafx.beans.value.ChangeListener;
import javafx.scene.layout.AnchorPane;

//Begin model
generation(n, freq){
    int nr = n;
    double[] frequency = new double[freq.length];
    for(i=0; i<freq.length; i++)
        frequency[i] = freq[i];

    return this;
};
generations = 100;
genlist = Collections.synchronizedList( new ArrayList() );

command = null;
view = null;
vframe = null;

bmargin = 0.0;
rmargin = 0.0;
xscale = 1;
yscale = 1;
bgColor = "#DDDDDD";
playSpeed = 100;
//End model

execute(c){
    this.args = c.split(" ");
    switch(args[0].trim()){
        case "stream" : stream(this.args[1].trim()); break;
        default: view.setText("no command\n" + view.getText());
    }
}

//Handlers
streamHandler(){
    return new Consumer(){
        accept(gen){
            synchronized(genlist){
                 genlist.add( generation(gen.genr, gen.frequency) );
            }
        }
    };
}

commandHandler(){
    return new EventHandler(){
        handle(ev){
            if (ev.getCode() == KeyCode.ENTER){
                String[] params = command.getText().split("\n");
                execute(params[params.length-1].trim());
            }
        }
    };
}

playerHandler(){
    return new Consumer(){
        accept(data){
            synchronized(genlist){
                paint();

                if (genlist.size()>=generations)
                    context.player.stop();
            }
        }

    };
}

frameHhandler(){
    return new ChangeListener(){    
        changed(ob, ov, nv){
            adjust(ov, nv, false);
        }
    };
}

frameWhandler(){
    return new ChangeListener(){    
        changed(ob, ov, nv){
            adjust(ov, nv, true );
        }
    };
}


//Utils
adjust(){
   view.setWidth(vframe.getWidth() - 2*rmargin);
   view.setHeight(vframe.getHeight() - 2*bmargin);

    paint();        
}

adjust(ov,nv,w){
    if (w)
      view.setWidth(nv.doubleValue() - 2*rmargin);
    else
      view.setHeight(nv.doubleValue() - 2*bmargin);

    paint();        
}

clearBackground(){
    gc = view.getGraphicsContext2D();
    gc.setFill(Color.valueOf(bgColor));
    gc.fillRect(0, 0, view.getWidth(), view.getHeight());
}

setScale(){
    xscale = view.getWidth()/(generations-1);
    yscale = view.getHeight();
}

paintTracks(){
    gc = view.getGraphicsContext2D();
    gc.setFill(Color.BLACK);

    for(g : genlist){
        for(f : g.frequency)
            gc.fillOval(g.nr * xscale, (1-f) *yscale, 5,5);
    }

}

paint(){
    setScale();
    clearBackground();
    paintTracks();
}

stream(source){
    genlist.clear();
    context.player.play(playSpeed, playerHandler());
    context.stream(source, streamHandler() );
}

//End controller


//Begin interface
init(){
    vframe = context.get("viewHost");
    vframe.heightProperty().addListener(frameHhandler());
    vframe.widthProperty().addListener(frameWhandler());

    view = context.get("view");

    command = context.get("command");
    command.addEventHandler(KeyEvent.KEY_RELEASED, commandHandler());

    bmargin = AnchorPane.getBottomAnchor(view).doubleValue();
    rmargin = AnchorPane.getRightAnchor(view).doubleValue();

    context.stage.setTitle("Advanced Population Genetics");

    adjust();
}

uiaddress(){
    return null;
}

ui(id){
 return "uix_" + id;
}

ui(){
 return ui("main");
}

style(){
    return style("main");
}

style(id){
    return "style_" + id;
}

stylePath(){
    return "style.css";
}

loaded(){
};
//End interface